--------------------------------------------------------------------------------
Profile data file 'cachegrind.out.159166'
--------------------------------------------------------------------------------
I1 cache:         49152 B, 64 B, 3-way associative
D1 cache:         32768 B, 64 B, 2-way associative
LL cache:         1048576 B, 64 B, 16-way associative
Profiled target:  ./bench_custom.out
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       99 0 0 0 0 0 0 0 0
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   I1mr         ILmr         Dr                   D1mr               DLmr             Dw                  D1mw             DLmw           
--------------------------------------------------------------------------------
382,848,289 (100.0%) 758 (100.0%) 754 (100.0%) 128,865,440 (100.0%) 5,008,741 (100.0%) 553,642 (100.0%) 35,935,947 (100.0%) 623,100 (100.0%) 4,348 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                   D1mr               DLmr             Dw                  D1mw             DLmw            file:function
--------------------------------------------------------------------------------
353,009,664 (92.21%)  7 ( 0.92%)  7 ( 0.93%) 115,015,680 (89.25%) 3,998,688 (79.83%) 307,591 (55.56%) 30,302,208 (84.32%) 401,088 (64.37%)     0           kernel_micro.c:sgemm_micro_kernel_neon_8x8
 18,898,944 ( 4.94%)  8 ( 1.06%)  8 ( 1.06%)   7,277,568 ( 5.65%)   110,592 ( 2.21%)  85,131 (15.38%)  2,171,904 ( 6.04%)  72,978 (11.71%)   542 (12.47%)  kernel_macro.c:pack_kxMR_neon_8x8
  6,230,016 ( 1.63%)  3 ( 0.40%)  3 ( 0.40%)   4,723,200 ( 3.67%)   884,826 (17.67%) 159,744 (28.85%)  3,257,856 ( 9.07%) 147,623 (23.69%) 3,243 (74.59%)  kernel_macro.c:pack_NRxk_neon_8x8
  4,497,984 ( 1.17%) 10 ( 1.32%) 10 ( 1.33%)   1,771,200 ( 1.37%)    12,192 ( 0.24%)       0             178,368 ( 0.50%)     384 ( 0.06%)     0           kernel_macro.c:sgemm_macro_kernel_neon_8x8

--------------------------------------------------------------------------------
-- Auto-annotated source: kernel_micro.c
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                  D1mr               DLmr             Dw                 D1mw             DLmw       

-- line 115 ----------------------------------------
          .          .          .                   .                  .                .                  .                .          .                           if (C[i * incRowC + j * incColC] < 0) C[i * incRowC + j * incColC] = 0;
          .          .          .                   .                  .                .                  .                .          .                       }
          .          .          .                   .                  .                .                  .                .          .                   }
          .          .          .                   .                  .                .                  .                .          .               }
          .          .          .                   .                  .                .                  .                .          .           }
          .          .          .                   .                  .                .                  .                .          .           
          .          .          .                   .                  .                .                  .                .          .           void sgemm_micro_kernel_neon_8x8(
          .          .          .                   .                  .                .                  .                .          .               int kc, float alpha, const float *A, const float *B, float beta, float *C, int incRowC, int incColC)
    663,552 ( 0.17%) 2 ( 0.26%) 2 ( 0.27%)          0                  0                0            589,824 ( 1.64%)   3,648 ( 0.59%) 0           {
          .          .          .                   .                  .                .                  .                .          .               /**
          .          .          .                   .                  .                .                  .                .          .                * ASSUME
          .          .          .                   .                  .                .                  .                .          .                * beta == 1
          .          .          .                   .                  .                .                  .                .          .                * incRowC == 1
          .          .          .                   .                  .                .                  .                .          .                */
          .          .          .                   .                  .                .                  .                .          .           
          .          .          .                   .                  .                .                  .                .          .               // A is column-wise ordered buffer
          .          .          .                   .                  .                .                  .                .          .               // B is row-wise ordered buffer
          .          .          .                   .                  .                .                  .                .          .           
          .          .          .                   .                  .                .                  .                .          .           #define KC_UNROLL 8
          .          .          .                   .                  .                .                  .                .          .           
    442,368 ( 0.12%) 0          0              73,728 ( 0.06%)         0                0             73,728 ( 0.21%)       0          0               int kc_unroll = kc / KC_UNROLL;
    442,368 ( 0.12%) 1 ( 0.13%) 1 ( 0.13%)     73,728 ( 0.06%)         0                0             73,728 ( 0.21%)       0          0               int kc_left = kc % KC_UNROLL;
          .          .          .                   .                  .                .                  .                .          .           
          .          .          .                   .                  .                .                  .                .          .               int i, j, k;
          .          .          .                   .                  .                .                  .                .          .           
          .          .          .                   .                  .                .                  .                .          .               // INIT AB = C
    663,552 ( 0.17%) 0          0           1,253,376 ( 0.97%)   884,736 (17.66%) 307,194 (55.49%)         0                0          0               __asm__ volatile(
          .          .          .                   .                  .                .                  .                .          .                   // load C to v16-31 (memory-friendly order)
          .          .          .                   .                  .                .                  .                .          .                   "ld1 {v16.4S-v17.4S}, [x0], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "ld1 {v18.4S-v19.4S}, [x0], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "ld1 {v20.4S-v21.4S}, [x0], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "ld1 {v22.4S-v23.4S}, [x0], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "ld1 {v24.4S-v25.4S}, [x0], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "ld1 {v26.4S-v27.4S}, [x0], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "ld1 {v28.4S-v29.4S}, [x0], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "ld1 {v30.4S-v31.4S}, [x0], %[incColC]\n\t" 
          .          .          .                   .                  .                .                  .                .          .                   ::
          .          .          .                   .                  .                .                  .                .          .                   [C] "r"(C),
    147,456 ( 0.04%) 0          0              73,728 ( 0.06%)         0                0                  0                0          0                   [incColC] "r"(incColC * 4)
          .          .          .                   .                  .                .                  .                .          .               );
          .          .          .                   .                  .                .                  .                .          .           
          .          .          .                   .                  .                .                  .                .          .               // COMPUTE C <- C + alpha * AB
 66,502,656 (17.37%) 1 ( 0.13%) 1 ( 0.13%) 28,459,008 (22.08%)         0                0          9,510,912 (26.47%)   1,728 ( 0.28%) 0               for (k = 0; k < kc; k++)
          .          .          .                   .                  .                .                  .                .          .               {
          .          .          .                   .                  .                .                  .                .          .                   // compute (8, 1) @ (1, 8)
226,492,416 (59.16%) 2 ( 0.26%) 2 ( 0.27%) 66,060,288 (51.26%) 3,094,608 (61.78%)     397 ( 0.07%)         0                0          0                   __asm__ volatile(
          .          .          .                   .                  .                .                  .                .          .                       // load A(8, 1) & B(1, 8)
          .          .          .                   .                  .                .                  .                .          .                       "ld1 {v0.4S-v1.4S}, [%[A]]\n\t"
          .          .          .                   .                  .                .                  .                .          .                       "ld1 {v2.4S-v3.4S}, [%[B]]\n\t"
          .          .          .                   .                  .                .                  .                .          .           
          .          .          .                   .                  .                .                  .                .          .                       // mult alpha to A
          .          .          .                   .                  .                .                  .                .          .                       "dup v4.4S, %w[alpha]\n\t"
          .          .          .                   .                  .                .                  .                .          .                       "fmul v0.4S, v0.4S, v4.4S\n\t"
          .          .          .                   .                  .                .                  .                .          .                       "fmul v1.4S, v1.4S, v4.4S\n\t"
-- line 168 ----------------------------------------
-- line 184 ----------------------------------------
          .          .          .                   .                  .                .                  .                .          .                       "fmla v28.4S, v2.4S, v1.4S[2]\n\t"
          .          .          .                   .                  .                .                  .                .          .                       "fmla v29.4S, v3.4S, v1.4S[2]\n\t"
          .          .          .                   .                  .                .                  .                .          .                       "fmla v30.4S, v2.4S, v1.4S[3]\n\t"
          .          .          .                   .                  .                .                  .                .          .                       "fmla v31.4S, v3.4S, v1.4S[3]\n\t"
          .          .          .                   .                  .                .                  .                .          .           
          .          .          .                   .                  .                .                  .                .          .                       ::[A] "r"(A),
          .          .          .                   .                  .                .                  .                .          .                       [B] "r"(B), [alpha] "r"(alpha)
          .          .          .                   .                  .                .                  .                .          .                       : "x0");
 28,311,552 ( 7.39%) 0          0           9,437,184 ( 7.32%)    13,248 ( 0.26%)       0          9,437,184 (26.26%)       0          0                   A += MR;
 28,311,552 ( 7.39%) 0          0           9,437,184 ( 7.32%)         0                0          9,437,184 (26.26%)       0          0                   B += NR;
          .          .          .                   .                  .                .                  .                .          .               }
          .          .          .                   .                  .                .                  .                .          .           
    663,552 ( 0.17%) 0          0              73,728 ( 0.06%)         0                0          1,179,648 ( 3.28%) 395,712 (63.51%) 0               __asm__ volatile(
          .          .          .                   .                  .                .                  .                .          .                   // store C
          .          .          .                   .                  .                .                  .                .          .                   "st1 {v16.4S-v17.4S}, [%[C]], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "st1 {v18.4S-v19.4S}, [%[C]], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "st1 {v20.4S-v21.4S}, [%[C]], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "st1 {v22.4S-v23.4S}, [%[C]], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "st1 {v24.4S-v25.4S}, [%[C]], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "st1 {v26.4S-v27.4S}, [%[C]], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "st1 {v28.4S-v29.4S}, [%[C]], %[incColC]\n\t"
          .          .          .                   .                  .                .                  .                .          .                   "st1 {v30.4S-v31.4S}, [%[C]], %[incColC]\n\t" ::[C] "r"(C),
    147,456 ( 0.04%) 0          0              73,728 ( 0.06%)     6,096 ( 0.12%)       0                  0                0          0                   [incColC] "r"(incColC * 4));
          .          .          .                   .                  .                .                  .                .          .           
    221,184 ( 0.06%) 1 ( 0.13%) 1 ( 0.13%)          0                  0                0                  0                0          0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: kernel_macro.c
--------------------------------------------------------------------------------
Ir                 I1mr       ILmr       Dr                 D1mr             DLmr             Dw                 D1mw             DLmw           

-- line 19 ----------------------------------------
        .          .          .                  .                .                .                  .                .              .           }
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           //  Packing complete panels from A (i.e. without padding)
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           void pack_NRxk_neon_8x8(
        .          .          .                  .                .                .                  .                .              .               int k, 
        .          .          .                  .                .                .                  .                .              .               const float *A, int incRowA, int incColA, float *buffer
   13,824 ( 0.00%) 1 ( 0.13%) 1 ( 0.13%)         0                0                0             11,520 ( 0.03%)      47 ( 0.01%)     0           ) {
        .          .          .                  .                .                .                  .                .              .               // Assume:
        .          .          .                  .                .                .                  .                .              .               // k is multiple of 8
        .          .          .                  .                .                .                  .                .              .               // incRowA is 1
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .               int j;
        .          .          .                  .                .                .                  .                .              .           
2,078,208 ( 0.54%) 2 ( 0.26%) 2 ( 0.27%)   889,344 ( 0.69%)       0                0            297,216 ( 0.83%)       0              0               for (j=0; j<k; ++j) {
1,769,472 ( 0.46%) 0          0          2,949,120 ( 2.29%) 884,736 (17.66%) 159,744 (28.85%) 2,359,296 ( 6.57%) 147,576 (23.68%) 3,243 (74.59%)          __asm__ volatile (
        .          .          .                  .                .                .                  .                .              .                       "ld1 {v0.4S-v3.4S}, [%[A]], #64\n\t"
        .          .          .                  .                .                .                  .                .              .                       "ld1 {v4.4S-v7.4S}, [%[A]]\n\t"
        .          .          .                  .                .                .                  .                .              .                       "st1 {v0.4S-v3.4S}, [%[buffer]], #64\n\t"
        .          .          .                  .                .                .                  .                .              .                       "st1 {v4.4S-v7.4S}, [%[buffer]]\n\t"
        .          .          .                  .                .                .                  .                .              .                       ::[A]"r"(A), [buffer]"r"(buffer)
        .          .          .                  .                .                .                  .                .              .                   );
        .          .          .                  .                .                .                  .                .              .           
  884,736 ( 0.23%) 0          0            294,912 ( 0.23%)      54 ( 0.00%)       0            294,912 ( 0.82%)       0              0                   buffer += NR;
1,474,560 ( 0.39%) 0          0            589,824 ( 0.46%)      36 ( 0.00%)       0            294,912 ( 0.82%)       0              0                   A      += incColA;
        .          .          .                  .                .                .                  .                .              .               }
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .               // __asm__ volatile (
        .          .          .                  .                .                .                  .                .              .               //     ".pack_NRxk_neon_8x8_LoopInit:\n\t"
        .          .          .                  .                .                .                  .                .              .               //     "mov x0, #0\n"
        .          .          .                  .                .                .                  .                .              .               //     ".pack_NRxk_neon_8x8_LoopCondition:\n\t"
        .          .          .                  .                .                .                  .                .              .               //     "cmp x0, %[k]\n\t"
-- line 52 ----------------------------------------
-- line 59 ----------------------------------------
        .          .          .                  .                .                .                  .                .              .               //     "st1 {v0.4S-v3.4S}, [%[buffer]], #64\n\t"
        .          .          .                  .                .                .                  .                .              .               //     "st1 {v4.4S-v7.4S}, [%[buffer]], #64\n\t"
        .          .          .                  .                .                .                  .                .              .               //     "add x0, x0, #1\n\t"
        .          .          .                  .                .                .                  .                .              .               //     "b .pack_NRxk_neon_8x8_LoopCondition\n"
        .          .          .                  .                .                .                  .                .              .               //     ".pack_NRxk_neon_8x8_LoopEnd:\n\t"
        .          .          .                  .                .                .                  .                .              .               //     ::[k]"r"(k), [A]"r"(A), [incColA]"r"(incColA*4), [buffer]"r"(buffer)
        .          .          .                  .                .                .                  .                .              .               //     :"x0"
        .          .          .                  .                .                .                  .                .              .               // );
    9,216 ( 0.00%) 0          0                  0                0                0                  0                0              0           }
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           //  Packing panels from A with padding if required
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           void pack_rowwise(
        .          .          .                  .                .                .                  .                .              .               int mc, int kc, 
        .          .          .                  .                .                .                  .                .              .               const float *A, int incRowA, int incColA, float *buffer
        .          .          .                  .                .                .                  .                .              .           ) {
-- line 75 ----------------------------------------
-- line 107 ----------------------------------------
        .          .          .                  .                .                .                  .                .              .           }
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           //  Packing panels from A with padding if required
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           void pack_rowwise_neon_8x8(
        .          .          .                  .                .                .                  .                .              .               int mc, int kc, 
        .          .          .                  .                .                .                  .                .              .               const float *A, int incRowA, int incColA, float *buffer
      384 ( 0.00%) 1 ( 0.13%) 1 ( 0.13%)         0                0                0                384 ( 0.00%)      47 ( 0.01%)     0           ) {
        .          .          .                  .                .                .                  .                .              .               // Assume:
        .          .          .                  .                .                .                  .                .              .               // mc, kc is multiples of 8
        .          .          .                  .                .                .                  .                .              .               // incRowA is 1
        .          .          .                  .                .                .                  .                .              .           
      288 ( 0.00%) 1 ( 0.13%) 1 ( 0.13%)        48 ( 0.00%)       0                0                 48 ( 0.00%)       0              0               int mp  = mc / NR;
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .               int i, j;
        .          .          .                  .                .                .                  .                .              .           
   16,416 ( 0.00%) 1 ( 0.13%) 1 ( 0.13%)     7,008 ( 0.01%)       0                0              2,352 ( 0.01%)       0              0               for (i=0; i<mp; ++i) {
   13,824 ( 0.00%) 0          0             11,520 ( 0.01%)       0                0                  0                0              0                   pack_NRxk_neon_8x8(kc, A, incRowA, incColA, buffer);
   16,128 ( 0.00%) 0          0              4,608 ( 0.00%)     108 ( 0.00%)       0              2,304 ( 0.01%)       0              0                   buffer += kc*NR;
    6,912 ( 0.00%) 0          0              2,304 ( 0.00%)       0                0              2,304 ( 0.01%)       0              0                   A      += NR;
        .          .          .                  .                .                .                  .                .              .               }
      192 ( 0.00%) 0          0                 96 ( 0.00%)       0                0                  0                0              0           }
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           //  Packing complete panels from B (i.e. without padding)
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           void pack_kxMR(
        .          .          .                  .                .                .                  .                .              .               int k, 
        .          .          .                  .                .                .                  .                .              .               const float *B, int incRowB, int incColB, float *buffer
        .          .          .                  .                .                .                  .                .              .           ) {
-- line 137 ----------------------------------------
-- line 148 ----------------------------------------
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           //  Packing complete panels from B (i.e. without padding)
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           void pack_kxMR_neon_8x8(
        .          .          .                  .                .                .                  .                .              .               int k, 
        .          .          .                  .                .                .                  .                .              .               const float *B, int incRowB, int incColB, float *buffer
    9,216 ( 0.00%) 2 ( 0.26%) 2 ( 0.27%)         0                0                0              7,680 ( 0.02%)     144 ( 0.02%)    15 ( 0.34%)  ) {
        .          .          .                  .                .                .                  .                .              .               // Assume:
        .          .          .                  .                .                .                  .                .              .               // size of B is multiple of 8
        .          .          .                  .                .                .                  .                .              .               // incRowB is 1
        .          .          .                  .                .                .                  .                .              .               int i, j;
        .          .          .                  .                .                .                  .                .              .           
1,385,472 ( 0.36%) 1 ( 0.13%) 1 ( 0.13%)   592,896 ( 0.46%)       0                0            198,144 ( 0.55%)       0              0               for (i=0; i<k; ++i) {
  786,432 ( 0.21%) 0          0            589,824 ( 0.46%)  13,824 ( 0.28%)  10,753 ( 1.94%)   196,608 ( 0.55%)     192 ( 0.03%)     1 ( 0.02%)          buffer[0] = B[0*incColB];
1,572,864 ( 0.41%) 1 ( 0.13%) 1 ( 0.13%)   786,432 ( 0.61%)  13,824 ( 0.28%)  10,372 ( 1.87%)   196,608 ( 0.55%)       0              0                   buffer[1] = B[1*incColB];
1,966,080 ( 0.51%) 0          0            786,432 ( 0.61%)  13,824 ( 0.28%)  10,620 ( 1.92%)   196,608 ( 0.55%)  72,642 (11.66%)   526 (12.10%)          buffer[2] = B[2*incColB];
2,359,296 ( 0.62%) 1 ( 0.13%) 1 ( 0.13%)   786,432 ( 0.61%)  13,824 ( 0.28%)  10,856 ( 1.96%)   196,608 ( 0.55%)       0              0                   buffer[3] = B[3*incColB];
1,966,080 ( 0.51%) 1 ( 0.13%) 1 ( 0.13%)   786,432 ( 0.61%)  13,824 ( 0.28%)  10,750 ( 1.94%)   196,608 ( 0.55%)       0              0                   buffer[4] = B[4*incColB];
2,359,296 ( 0.62%) 0          0            786,432 ( 0.61%)  13,824 ( 0.28%)  10,316 ( 1.86%)   196,608 ( 0.55%)       0              0                   buffer[5] = B[5*incColB];
2,555,904 ( 0.67%) 1 ( 0.13%) 1 ( 0.13%)   786,432 ( 0.61%)  13,824 ( 0.28%)  10,676 ( 1.93%)   196,608 ( 0.55%)       0              0                   buffer[6] = B[6*incColB];
2,359,296 ( 0.62%) 1 ( 0.13%) 1 ( 0.13%)   786,432 ( 0.61%)  13,824 ( 0.28%)  10,788 ( 1.95%)   196,608 ( 0.55%)       0              0                   buffer[7] = B[7*incColB];
        .          .          .                  .                .                .                  .                .              .           
  589,824 ( 0.15%) 0          0            196,608 ( 0.15%)       0                0            196,608 ( 0.55%)       0              0                   buffer += MR;
  983,040 ( 0.26%) 0          0            393,216 ( 0.31%)       0                0            196,608 ( 0.55%)       0              0                   B      += incRowB;
        .          .          .                  .                .                .                  .                .              .               }
    6,144 ( 0.00%) 0          0                  0                0                0                  0                0              0           }
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           //  Packing complete panels from B (i.e. without padding)
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           void pack_kxNR_unroll(
        .          .          .                  .                .                .                  .                .              .               int k, 
        .          .          .                  .                .                .                  .                .              .               const float *B, int incRowB, int incColB, float *buffer
        .          .          .                  .                .                .                  .                .              .           ) {
-- line 183 ----------------------------------------
-- line 238 ----------------------------------------
        .          .          .                  .                .                .                  .                .              .           }
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           //  Packing panels from B with padding if required
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           void pack_colwise_neon_8x8(
        .          .          .                  .                .                .                  .                .              .               int kc, int nc, 
        .          .          .                  .                .                .                  .                .              .               const float *B, int incRowB, int incColB, float *buffer
    1,536 ( 0.00%) 1 ( 0.13%) 1 ( 0.13%)         0                0                0              1,536 ( 0.00%)     144 ( 0.02%)    15 ( 0.34%)  ) {
        .          .          .                  .                .                .                  .                .              .               // Assume:
        .          .          .                  .                .                .                  .                .              .               // mc, kc is multiples of 8
        .          .          .                  .                .                .                  .                .              .               // incRowA is 1
    1,152 ( 0.00%) 1 ( 0.13%) 1 ( 0.13%)       192 ( 0.00%)       0                0                192 ( 0.00%)       0              0               int np  = nc / MR;
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .               int i, j;
        .          .          .                  .                .                .                  .                .              .           
   11,904 ( 0.00%) 1 ( 0.13%) 1 ( 0.13%)     4,992 ( 0.00%)       0                0              1,728 ( 0.00%)       0              0               for (j=0; j<np; ++j) {
    9,216 ( 0.00%) 0          0              7,680 ( 0.01%)       0                0                  0                0              0                   pack_kxMR_neon_8x8(kc, B, incRowB, incColB, buffer);
   10,752 ( 0.00%) 0          0              3,072 ( 0.00%)      64 ( 0.00%)       0              1,536 ( 0.00%)       0              0                   buffer += kc*MR;
   10,752 ( 0.00%) 0          0              3,072 ( 0.00%)       0                0              1,536 ( 0.00%)       0              0                   B      += MR*incColB;
        .          .          .                  .                .                .                  .                .              .               }
      768 ( 0.00%) 1 ( 0.13%) 1 ( 0.13%)       384 ( 0.00%)       0                0                  0                0              0           }
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           //  Packing panels from B with padding if required
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           void pack_colwise(
        .          .          .                  .                .                .                  .                .              .               int kc, int nc, 
        .          .          .                  .                .                .                  .                .              .               const float *B, int incRowB, int incColB, float *buffer
        .          .          .                  .                .                .                  .                .              .           ) {
-- line 267 ----------------------------------------
-- line 406 ----------------------------------------
        .          .          .                  .                .                .                  .                .              .           //  Macro Kernel for the multiplication of blocks of A and B.  
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           void sgemm_macro_kernel_neon_8x8(
        .          .          .                  .                .                .                  .                .              .               int mc, int nc, int kc,
        .          .          .                  .                .                .                  .                .              .               float alpha,
        .          .          .                  .                .                .                  .                .              .               float *A_buffer, float *B_buffer,
        .          .          .                  .                .                .                  .                .              .               float beta,
        .          .          .                  .                .                .                  .                .              .               float *C, int incRowC, int incColC
    2,304 ( 0.00%) 2 ( 0.26%) 2 ( 0.27%)         0                0                0              2,304 ( 0.01%)     384 ( 0.06%)     0           ) {
        .          .          .                  .                .                .                  .                .              .               // Assume:
        .          .          .                  .                .                .                  .                .              .               // mc, nc, kc is multiple of 8
        .          .          .                  .                .                .                  .                .              .               // incRowC is 1
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .               float _C[MR*NR];
        .          .          .                  .                .                .                  .                .              .           
    1,344 ( 0.00%) 1 ( 0.13%) 1 ( 0.13%)       192 ( 0.00%)       0                0                192 ( 0.00%)       0              0               int mp = (mc+MR-1) / MR;
    1,344 ( 0.00%) 0          0                192 ( 0.00%)       0                0                192 ( 0.00%)       0              0               int np = (nc+NR-1) / NR;
        .          .          .                  .                .                .                  .                .              .           
    1,152 ( 0.00%) 0          0                192 ( 0.00%)       0                0                192 ( 0.00%)       0              0               int _mr = mc % MR;
    1,152 ( 0.00%) 1 ( 0.13%) 1 ( 0.13%)       192 ( 0.00%)       0                0                192 ( 0.00%)       0              0               int _nr = nc % NR;
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .               int mr, nr;
        .          .          .                  .                .                .                  .                .              .               int i, j;
        .          .          .                  .                .                .                  .                .              .           
   65,664 ( 0.02%) 1 ( 0.13%) 1 ( 0.13%)    28,032 ( 0.02%)       0                0              9,408 ( 0.03%)       0              0               for (j=0; j<np; ++j) {
   65,088 ( 0.02%) 1 ( 0.13%) 1 ( 0.13%)    18,624 ( 0.01%)       0                0              9,216 ( 0.03%)       0              0                   nr    = (j!=np-1 || _nr==0) ? NR : _nr;
        .          .          .                  .                .                .                  .                .              .           
  571,392 ( 0.15%) 0          0            239,616 ( 0.19%)   6,096 ( 0.12%)       0             82,944 ( 0.23%)       0              0                   for (i=0; i<mp; ++i) {
  543,744 ( 0.14%) 1 ( 0.13%) 1 ( 0.13%)   156,672 ( 0.12%)       0                0             73,728 ( 0.21%)       0              0                       mr    = (i!=mp-1 || _mr==0) ? MR : _mr;
        .          .          .                  .                .                .                  .                .              .           
  442,368 ( 0.12%) 0          0            147,456 ( 0.11%)       0                0                  0                0              0                       if (mr==MR && nr==NR) {
2,064,384 ( 0.54%) 1 ( 0.13%) 1 ( 0.13%)   884,736 ( 0.69%)   6,096 ( 0.12%)       0                  0                0              0                           sgemm_micro_kernel_neon_8x8(kc, alpha, &A_buffer[i*kc*MR], &B_buffer[j*kc*NR],
        .          .          .                  .                .                .                  .                .              .                                              beta,
  737,280 ( 0.19%) 1 ( 0.13%) 1 ( 0.13%)   294,912 ( 0.23%)       0                0                  0                0              0                                              &C[i*MR*incColC+j*NR*incRowC],
        .          .          .                  .                .                .                  .                .              .                                              incRowC, incColC);
        .          .          .                  .                .                .                  .                .              .                       } else {
        .          .          .                  .                .                .                  .                .              .                           sgemm_micro_kernel_neon_8x8(kc, alpha, &A_buffer[i*kc*MR], &B_buffer[j*kc*NR],
        .          .          .                  .                .                .                  .                .              .                                              0.0,
        .          .          .                  .                .                .                  .                .              .                                              _C, 1, MR);
        .          .          .                  .                .                .                  .                .              .                           sgescal(mr, nr, beta,
        .          .          .                  .                .                .                  .                .              .                                   &C[i*MR*incColC+j*NR*incRowC], incRowC, incColC);
        .          .          .                  .                .                .                  .                .              .                           sgeaxpy(mr, nr, 1.0, _C, 1, MR,
        .          .          .                  .                .                .                  .                .              .                                   &C[i*MR*incColC+j*NR*incRowC], incRowC, incColC);
        .          .          .                  .                .                .                  .                .              .                       }
        .          .          .                  .                .                .                  .                .              .                   }
        .          .          .                  .                .                .                  .                .              .               }
      768 ( 0.00%) 1 ( 0.13%) 1 ( 0.13%)       384 ( 0.00%)       0                0                  0                0              0           }
        .          .          .                  .                .                .                  .                .              .           
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           //  Macro Kernel for the multiplication of blocks of A and B and ReLU.  We assume that
        .          .          .                  .                .                .                  .                .              .           //  these blocks were previously packed to buffers _A and _B.
        .          .          .                  .                .                .                  .                .              .           //
        .          .          .                  .                .                .                  .                .              .           void sgemm_macro_kernel_relu(
        .          .          .                  .                .                .                  .                .              .               int mc, int nc, int kc,
        .          .          .                  .                .                .                  .                .              .               float alpha, 
-- line 460 ----------------------------------------

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                   D1mr               DLmr             Dw                  D1mw             DLmw           
--------------------------------------------------------------------------------
382,736,832 (99.97%) 35 ( 4.62%) 35 ( 4.64%) 128,832,624 (99.97%) 5,006,470 (99.95%) 552,466 (99.79%) 35,924,256 (99.97%) 622,264 (99.87%) 3,800 (87.40%)  events annotated

