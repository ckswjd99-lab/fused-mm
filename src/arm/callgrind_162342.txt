--------------------------------------------------------------------------------
Profile data file 'callgrind.out.162342' (creator: callgrind-3.16.1)
--------------------------------------------------------------------------------
I1 cache: 49152 B, 64 B, 3-way associative
D1 cache: 32768 B, 64 B, 2-way associative
LL cache: 1048576 B, 64 B, 16-way associative
Timerange: Basic block 0 - 5783088
Trigger: Program termination
Profiled target:  ./bench_custom.out (PID 162342, part 1)
Events recorded:  Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Events shown:     Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Event sort order: Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Thresholds:       99 0 0 0 0 0 0 0 0
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   Dr                  Dw                 I1mr         D1mr               D1mw             ILmr         DLmr             DLmw            
--------------------------------------------------------------------------------
239,407,502 (100.0%) 56,229,596 (100.0%) 9,092,715 (100.0%) 765 (100.0%) 6,903,215 (100.0%) 560,994 (100.0%) 761 (100.0%) 520,455 (100.0%) 22,831 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   Dr                  Dw                 I1mr        D1mr               D1mw             ILmr        DLmr             DLmw             file:function
--------------------------------------------------------------------------------
226,270,176 (94.51%) 48,807,072 (86.80%) 5,381,712 (59.19%) 12 ( 1.57%) 5,990,154 (86.77%) 400,320 (71.36%) 12 ( 1.58%) 352,761 (67.78%)      .           kernel_micro.c:sgemm_micro_kernel_neon_8x8'2 [/home/cjpark/Workspace/fused-mm/src/arm/bench_custom.out]
  6,282,216 ( 2.62%)  4,748,208 ( 8.44%) 3,264,552 (35.90%)  2 ( 0.26%)   884,928 (12.82%) 147,564 (26.30%)  2 ( 0.26%) 152,083 (29.22%) 16,574 (72.59%)  kernel_macro.c:pack_NRxk_neon_8x8'2 [/home/cjpark/Workspace/fused-mm/src/arm/bench_custom.out]
  4,310,888 ( 1.80%)  1,733,036 ( 3.08%)   162,079 ( 1.78%)  6 ( 0.78%)    12,150 ( 0.18%)      58 ( 0.01%)  6 ( 0.79%)       .               .           kernel_macro.c:sgemm_macro_kernel_neon_8x8'2 [/home/cjpark/Workspace/fused-mm/src/arm/bench_custom.out]
  2,367,108 ( 0.99%)    911,820 ( 1.62%)   271,956 ( 2.99%)  7 ( 0.92%)    13,832 ( 0.20%)  12,294 ( 2.19%)  7 ( 0.92%)  13,823 ( 2.66%)  5,655 (24.77%)  kernel_macro.c:pack_kxMR_neon_8x8'2 [/home/cjpark/Workspace/fused-mm/src/arm/bench_custom.out]

--------------------------------------------------------------------------------
-- Auto-annotated source: kernel_macro.c
--------------------------------------------------------------------------------
Ir                 Dr                 Dw                 I1mr       D1mr             D1mw             ILmr       DLmr             DLmw            

-- line 19 ----------------------------------------
        .                  .                  .          .                .                .          .                .               .           }
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           //  Packing complete panels from A (i.e. without padding)
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           void pack_NRxk_neon_8x8(
        .                  .                  .          .                .                .          .                .               .               int k, 
        .                  .                  .          .                .                .          .                .               .               const float *A, int incRowA, int incColA, float *buffer
   13,824 ( 0.01%)         0             11,520 ( 0.13%) 1 ( 0.13%)       0               23 ( 0.00%) 1 ( 0.13%)       0              17 ( 0.07%)  ) {
        .                  .                  .          .                .                .          .                .               .               // Assume:
        .                  .                  .          .                .                .          .                .               .               // k is multiple of 8
        .                  .                  .          .                .                .          .                .               .               // incRowA is 1
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .               int j;
        .                  .                  .          .                .                .          .                .               .           
2,078,208 ( 0.87%)   889,344 ( 1.58%)   297,216 ( 3.27%) 2 ( 0.26%)       0                0          2 ( 0.26%)       .               .               for (j=0; j<k; ++j) {
   64,704 ( 0.03%)    49,200 ( 0.09%)    33,792 ( 0.37%) 2 ( 0.26%)   9,216 ( 0.13%)   1,584 ( 0.28%) 2 ( 0.26%)   6,163 ( 1.18%)     71 ( 0.31%)  => kernel_macro.c:pack_NRxk_neon_8x8'2 (24x)
1,769,472 ( 0.74%) 2,949,120 ( 5.24%) 2,359,296 (25.95%) 0          884,736 (12.82%) 147,564 (26.30%) 0          152,083 (29.22%) 16,574 (72.59%)          __asm__ volatile (
        .                  .                  .          .                .                .          .                .               .                       "ld1 {v0.4S-v3.4S}, [%[A]], #64\n\t"
        .                  .                  .          .                .                .          .                .               .                       "ld1 {v4.4S-v7.4S}, [%[A]]\n\t"
        .                  .                  .          .                .                .          .                .               .                       "st1 {v0.4S-v3.4S}, [%[buffer]], #64\n\t"
        .                  .                  .          .                .                .          .                .               .                       "st1 {v4.4S-v7.4S}, [%[buffer]]\n\t"
        .                  .                  .          .                .                .          .                .               .                       ::[A]"r"(A), [buffer]"r"(buffer)
        .                  .                  .          .                .                .          .                .               .                   );
        .                  .                  .          .                .                .          .                .               .           
  884,736 ( 0.37%)   294,912 ( 0.52%)   294,912 ( 3.24%) 0               42 ( 0.00%)       .          .                .               .                   buffer += NR;
1,474,560 ( 0.62%)   589,824 ( 1.05%)   294,912 ( 3.24%) 0               42 ( 0.00%)       .          .                .               .                   A      += incColA;
        .                  .                  .          .                .                .          .                .               .               }
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .               // __asm__ volatile (
        .                  .                  .          .                .                .          .                .               .               //     ".pack_NRxk_neon_8x8_LoopInit:\n\t"
        .                  .                  .          .                .                .          .                .               .               //     "mov x0, #0\n"
        .                  .                  .          .                .                .          .                .               .               //     ".pack_NRxk_neon_8x8_LoopCondition:\n\t"
        .                  .                  .          .                .                .          .                .               .               //     "cmp x0, %[k]\n\t"
-- line 52 ----------------------------------------
-- line 59 ----------------------------------------
        .                  .                  .          .                .                .          .                .               .               //     "st1 {v0.4S-v3.4S}, [%[buffer]], #64\n\t"
        .                  .                  .          .                .                .          .                .               .               //     "st1 {v4.4S-v7.4S}, [%[buffer]], #64\n\t"
        .                  .                  .          .                .                .          .                .               .               //     "add x0, x0, #1\n\t"
        .                  .                  .          .                .                .          .                .               .               //     "b .pack_NRxk_neon_8x8_LoopCondition\n"
        .                  .                  .          .                .                .          .                .               .               //     ".pack_NRxk_neon_8x8_LoopEnd:\n\t"
        .                  .                  .          .                .                .          .                .               .               //     ::[k]"r"(k), [A]"r"(A), [incColA]"r"(incColA*4), [buffer]"r"(buffer)
        .                  .                  .          .                .                .          .                .               .               //     :"x0"
        .                  .                  .          .                .                .          .                .               .               // );
    9,216 ( 0.00%)         .                  .          .                .                .          .                .               .           }
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           //  Packing panels from A with padding if required
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           void pack_rowwise(
        .                  .                  .          .                .                .          .                .               .               int mc, int kc, 
        .                  .                  .          .                .                .          .                .               .               const float *A, int incRowA, int incColA, float *buffer
        .                  .                  .          .                .                .          .                .               .           ) {
-- line 75 ----------------------------------------
-- line 107 ----------------------------------------
        .                  .                  .          .                .                .          .                .               .           }
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           //  Packing panels from A with padding if required
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           void pack_rowwise_neon_8x8(
        .                  .                  .          .                .                .          .                .               .               int mc, int kc, 
        .                  .                  .          .                .                .          .                .               .               const float *A, int incRowA, int incColA, float *buffer
      192 ( 0.00%)         0                192 ( 0.00%) 1 ( 0.13%)       0               23 ( 0.00%) 1 ( 0.13%)       0              17 ( 0.07%)  ) {
        .                  .                  .          .                .                .          .                .               .               // Assume:
        .                  .                  .          .                .                .          .                .               .               // mc, kc is multiples of 8
        .                  .                  .          .                .                .          .                .               .               // incRowA is 1
        .                  .                  .          .                .                .          .                .               .           
      144 ( 0.00%)        24 ( 0.00%)        24 ( 0.00%) 1 ( 0.13%)       0                0          1 ( 0.13%)       .               .               int mp  = mc / NR;
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .               int i, j;
        .                  .                  .          .                .                .          .                .               .           
   16,272 ( 0.01%)     6,960 ( 0.01%)     2,328 ( 0.03%) 1 ( 0.13%)       0                0          1 ( 0.13%)       .               .               for (i=0; i<mp; ++i) {
  286,343 ( 0.12%)   216,409 ( 0.38%)   148,785 ( 1.64%) 4 ( 0.52%)  40,320 ( 0.58%)   6,722 ( 1.20%) 4 ( 0.53%)   7,040 ( 1.35%)  6,722 (29.44%)  => kernel_macro.c:pack_rowwise_neon_8x8'2 (1x)
   13,824 ( 0.01%)    11,520 ( 0.02%)         .          .                .                .          .                .               .                   pack_NRxk_neon_8x8(kc, A, incRowA, incColA, buffer);
6,282,960 ( 2.62%) 4,748,472 ( 8.44%) 3,264,768 (35.91%) 3 ( 0.39%) 884,928 (12.82%) 147,587 (26.31%) 3 ( 0.39%) 152,083 (29.22%) 16,591 (72.67%)  => kernel_macro.c:pack_NRxk_neon_8x8 (24x)
   16,128 ( 0.01%)     4,608 ( 0.01%)     2,304 ( 0.03%) 0              108 ( 0.00%)       .          .                .               .                   buffer += kc*NR;
    6,912 ( 0.00%)     2,304 ( 0.00%)     2,304 ( 0.03%) .                .                .          .                .               .                   A      += NR;
        .                  .                  .          .                .                .          .                .               .               }
       96 ( 0.00%)        48 ( 0.00%)         .          .                .                .          .                .               .           }
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           //  Packing complete panels from B (i.e. without padding)
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           void pack_kxMR(
        .                  .                  .          .                .                .          .                .               .               int k, 
        .                  .                  .          .                .                .          .                .               .               const float *B, int incRowB, int incColB, float *buffer
        .                  .                  .          .                .                .          .                .               .           ) {
-- line 137 ----------------------------------------
-- line 148 ----------------------------------------
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           //  Packing complete panels from B (i.e. without padding)
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           void pack_kxMR_neon_8x8(
        .                  .                  .          .                .                .          .                .               .               int k, 
        .                  .                  .          .                .                .          .                .               .               const float *B, int incRowB, int incColB, float *buffer
    1,152 ( 0.00%)         0                960 ( 0.01%) 2 ( 0.26%)       0                6 ( 0.00%) 2 ( 0.26%)       .               .           ) {
        .                  .                  .          .                .                .          .                .               .               // Assume:
        .                  .                  .          .                .                .          .                .               .               // size of B is multiple of 8
        .                  .                  .          .                .                .          .                .               .               // incRowB is 1
        .                  .                  .          .                .                .          .                .               .               int i, j;
        .                  .                  .          .                .                .          .                .               .           
  173,184 ( 0.07%)    74,112 ( 0.13%)    24,768 ( 0.27%) 1 ( 0.13%)       0                0          1 ( 0.13%)       .               .               for (i=0; i<k; ++i) {
  147,552 ( 0.06%)    56,856 ( 0.10%)    16,896 ( 0.19%) 6 ( 0.78%)     864 ( 0.01%)     774 ( 0.14%) 6 ( 0.79%)     863 ( 0.17%)    247 ( 1.08%)  => kernel_macro.c:pack_kxMR_neon_8x8'2 (12x)
   98,304 ( 0.04%)    73,728 ( 0.13%)    24,576 ( 0.27%) 0            1,728 ( 0.03%)       6 ( 0.00%) 0            1,727 ( 0.33%)      1 ( 0.00%)          buffer[0] = B[0*incColB];
  196,608 ( 0.08%)    98,304 ( 0.17%)    24,576 ( 0.27%) 1 ( 0.13%)   1,728 ( 0.03%)       0          1 ( 0.13%)   1,728 ( 0.33%)      .                   buffer[1] = B[1*incColB];
  245,760 ( 0.10%)    98,304 ( 0.17%)    24,576 ( 0.27%) 0            1,728 ( 0.03%)  12,288 ( 2.19%) 0            1,728 ( 0.33%)  5,654 (24.76%)          buffer[2] = B[2*incColB];
  294,912 ( 0.12%)    98,304 ( 0.17%)    24,576 ( 0.27%) 1 ( 0.13%)   1,728 ( 0.03%)       0          1 ( 0.13%)   1,728 ( 0.33%)      .                   buffer[3] = B[3*incColB];
  245,760 ( 0.10%)    98,304 ( 0.17%)    24,576 ( 0.27%) 1 ( 0.13%)   1,728 ( 0.03%)       0          1 ( 0.13%)   1,728 ( 0.33%)      .                   buffer[4] = B[4*incColB];
  294,912 ( 0.12%)    98,304 ( 0.17%)    24,576 ( 0.27%) 0            1,728 ( 0.03%)       0          0            1,728 ( 0.33%)      .                   buffer[5] = B[5*incColB];
  319,488 ( 0.13%)    98,304 ( 0.17%)    24,576 ( 0.27%) 1 ( 0.13%)   1,728 ( 0.03%)       0          1 ( 0.13%)   1,728 ( 0.33%)      .                   buffer[6] = B[6*incColB];
  294,912 ( 0.12%)    98,304 ( 0.17%)    24,576 ( 0.27%) 1 ( 0.13%)   1,728 ( 0.03%)       0          1 ( 0.13%)   1,728 ( 0.33%)      .                   buffer[7] = B[7*incColB];
        .                  .                  .          .                .                .          .                .               .           
   73,728 ( 0.03%)    24,576 ( 0.04%)    24,576 ( 0.27%) .                .                .          .                .               .                   buffer += MR;
  122,880 ( 0.05%)    49,152 ( 0.09%)    24,576 ( 0.27%) .                .                .          .                .               .                   B      += incRowB;
        .                  .                  .          .                .                .          .                .               .               }
      768 ( 0.00%)         .                  .          .                .                .          .                .               .           }
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           //  Packing complete panels from B (i.e. without padding)
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           void pack_kxNR_unroll(
        .                  .                  .          .                .                .          .                .               .               int k, 
        .                  .                  .          .                .                .          .                .               .               const float *B, int incRowB, int incColB, float *buffer
        .                  .                  .          .                .                .          .                .               .           ) {
-- line 183 ----------------------------------------
-- line 238 ----------------------------------------
        .                  .                  .          .                .                .          .                .               .           }
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           //  Packing panels from B with padding if required
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           void pack_colwise_neon_8x8(
        .                  .                  .          .                .                .          .                .               .               int kc, int nc, 
        .                  .                  .          .                .                .          .                .               .               const float *B, int incRowB, int incColB, float *buffer
       96 ( 0.00%)         0                 96 ( 0.00%) 1 ( 0.13%)       0                6 ( 0.00%) 1 ( 0.13%)       .               .           ) {
        .                  .                  .          .                .                .          .                .               .               // Assume:
        .                  .                  .          .                .                .          .                .               .               // mc, kc is multiples of 8
        .                  .                  .          .                .                .          .                .               .               // incRowA is 1
       72 ( 0.00%)        12 ( 0.00%)        12 ( 0.00%) 1 ( 0.13%)       0                0          1 ( 0.13%)       .               .               int np  = nc / MR;
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .               int i, j;
        .                  .                  .          .                .                .          .                .               .           
    1,416 ( 0.00%)       600 ( 0.00%)       204 ( 0.00%) 1 ( 0.13%)       0                0          1 ( 0.13%)       .               .               for (j=0; j<np; ++j) {
  197,304 ( 0.08%)    76,004 ( 0.14%)    22,672 ( 0.25%) 10 ( 1.31%)   1,152 ( 0.02%)   1,025 ( 0.18%) 10 ( 1.31%)   1,151 ( 0.22%)  1,025 ( 4.49%)  => kernel_macro.c:pack_colwise_neon_8x8'2 (1x)
    1,152 ( 0.00%)       960 ( 0.00%)         .          .                .                .          .                .               .                   pack_kxMR_neon_8x8(kc, B, incRowB, incColB, buffer);
2,367,528 ( 0.99%)   911,964 ( 1.62%)   272,064 ( 2.99%) 9 ( 1.18%)  13,832 ( 0.20%)  12,300 ( 2.19%) 9 ( 1.18%)  13,823 ( 2.66%)  5,655 (24.77%)  => kernel_macro.c:pack_kxMR_neon_8x8 (12x)
    1,344 ( 0.00%)       384 ( 0.00%)       192 ( 0.00%) 0                8 ( 0.00%)       .          .                .               .                   buffer += kc*MR;
    1,344 ( 0.00%)       384 ( 0.00%)       192 ( 0.00%) .                .                .          .                .               .                   B      += MR*incColB;
        .                  .                  .          .                .                .          .                .               .               }
       48 ( 0.00%)        24 ( 0.00%)         0          1 ( 0.13%)       0                0          1 ( 0.13%)       .               .           }
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           //  Packing panels from B with padding if required
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           void pack_colwise(
        .                  .                  .          .                .                .          .                .               .               int kc, int nc, 
        .                  .                  .          .                .                .          .                .               .               const float *B, int incRowB, int incColB, float *buffer
        .                  .                  .          .                .                .          .                .               .           ) {
-- line 267 ----------------------------------------
-- line 406 ----------------------------------------
        .                  .                  .          .                .                .          .                .               .           //  Macro Kernel for the multiplication of blocks of A and B.  
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           void sgemm_macro_kernel_neon_8x8(
        .                  .                  .          .                .                .          .                .               .               int mc, int nc, int kc,
        .                  .                  .          .                .                .          .                .               .               float alpha,
        .                  .                  .          .                .                .          .                .               .               float *A_buffer, float *B_buffer,
        .                  .                  .          .                .                .          .                .               .               float beta,
        .                  .                  .          .                .                .          .                .               .               float *C, int incRowC, int incColC
      576 ( 0.00%)         0                576 ( 0.01%) 2 ( 0.26%)       0               60 ( 0.01%) 2 ( 0.26%)       .               .           ) {
        .                  .                  .          .                .                .          .                .               .               // Assume:
        .                  .                  .          .                .                .          .                .               .               // mc, nc, kc is multiple of 8
        .                  .                  .          .                .                .          .                .               .               // incRowC is 1
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .               float _C[MR*NR];
        .                  .                  .          .                .                .          .                .               .           
      336 ( 0.00%)        48 ( 0.00%)        48 ( 0.00%) 1 ( 0.13%)       0                0          1 ( 0.13%)       .               .               int mp = (mc+MR-1) / MR;
      336 ( 0.00%)        48 ( 0.00%)        48 ( 0.00%) .                .                .          .                .               .               int np = (nc+NR-1) / NR;
        .                  .                  .          .                .                .          .                .               .           
      288 ( 0.00%)        48 ( 0.00%)        48 ( 0.00%) .                .                .          .                .               .               int _mr = mc % MR;
      288 ( 0.00%)        48 ( 0.00%)        48 ( 0.00%) 1 ( 0.13%)       0                0          1 ( 0.13%)       .               .               int _nr = nc % NR;
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .               int mr, nr;
        .                  .                  .          .                .                .          .                .               .               int i, j;
        .                  .                  .          .                .                .          .                .               .           
   32,544 ( 0.01%)    13,920 ( 0.02%)     4,656 ( 0.05%) 1 ( 0.13%)       0                0          1 ( 0.13%)       .               .               for (j=0; j<np; ++j) {
5,255,786 ( 2.20%) 1,151,645 ( 2.05%)   126,315 ( 1.39%) 21 ( 2.75%) 137,690 ( 1.99%)   8,873 ( 1.58%) 21 ( 2.76%)  10,400 ( 2.00%)      1 ( 0.00%)  => kernel_macro.c:sgemm_macro_kernel_neon_8x8'2 (1x)
   32,400 ( 0.01%)     9,264 ( 0.02%)     4,608 ( 0.05%) 1 ( 0.13%)       0                0          1 ( 0.13%)       .               .                   nr    = (j!=np-1 || _nr==0) ? NR : _nr;
        .                  .                  .          .                .                .          .                .               .           
  543,744 ( 0.23%)   230,400 ( 0.41%)    78,336 ( 0.86%) 0            6,096 ( 0.09%)       .          .                .               .                   for (i=0; i<mp; ++i) {
11,478,603,240 (4794.6%) 2,515,186,320 (4473.1%) 275,862,744 (3033.9%) 123 (16.08%) 300,551,820 (4353.8%) 19,645,878 (3502.0%) 123 (16.16%) 16,924,188 (3251.8%)      6 ( 0.03%)  => kernel_macro.c:sgemm_macro_kernel_neon_8x8'2 (4,608x)
  529,920 ( 0.22%)   152,064 ( 0.27%)    73,728 ( 0.81%) 1 ( 0.13%)       0                0          1 ( 0.13%)       .               .                       mr    = (i!=mp-1 || _mr==0) ? MR : _mr;
        .                  .                  .          .                .                .          .                .               .           
  442,368 ( 0.18%)   147,456 ( 0.26%)         .          .                .                .          .                .               .                       if (mr==MR && nr==NR) {
2,064,384 ( 0.86%)   884,736 ( 1.57%)         0          1 ( 0.13%)   6,054 ( 0.09%)       0          1 ( 0.13%)       .               .                           sgemm_micro_kernel_neon_8x8(kc, alpha, &A_buffer[i*kc*MR], &B_buffer[j*kc*NR],
181,693,900,032 (75893.2%) 39,812,037,360 (70802.6%) 4,366,714,896 (48024.3%) 1,679 (219.5%) 4,755,750,918 (68891.8%) 310,930,272 (55424.9%) 1,679 (220.6%) 267,483,750 (51394.2%)      .           => /home/cjpark/Workspace/fused-mm/src/arm/kernel_micro.c:sgemm_micro_kernel_neon_8x8'2 (73,680x)
230,650,752 (96.34%) 50,539,536 (89.88%) 5,543,280 (60.96%) 16 ( 2.09%) 6,002,880 (86.96%) 400,350 (71.36%) 16 ( 2.10%) 353,337 (67.89%)      6 ( 0.03%)  => /home/cjpark/Workspace/fused-mm/src/arm/kernel_micro.c:sgemm_micro_kernel_neon_8x8 (48x)
        .                  .                  .          .                .                .          .                .               .                                              beta,
  737,280 ( 0.31%)   294,912 ( 0.52%)         0          1 ( 0.13%)       0                0          1 ( 0.13%)       .               .                                              &C[i*MR*incColC+j*NR*incRowC],
        .                  .                  .          .                .                .          .                .               .                                              incRowC, incColC);
        .                  .                  .          .                .                .          .                .               .                       } else {
        .                  .                  .          .                .                .          .                .               .                           sgemm_micro_kernel_neon_8x8(kc, alpha, &A_buffer[i*kc*MR], &B_buffer[j*kc*NR],
        .                  .                  .          .                .                .          .                .               .                                              0.0,
        .                  .                  .          .                .                .          .                .               .                                              _C, 1, MR);
        .                  .                  .          .                .                .          .                .               .                           sgescal(mr, nr, beta,
        .                  .                  .          .                .                .          .                .               .                                   &C[i*MR*incColC+j*NR*incRowC], incRowC, incColC);
        .                  .                  .          .                .                .          .                .               .                           sgeaxpy(mr, nr, 1.0, _C, 1, MR,
        .                  .                  .          .                .                .          .                .               .                                   &C[i*MR*incColC+j*NR*incRowC], incRowC, incColC);
        .                  .                  .          .                .                .          .                .               .                       }
        .                  .                  .          .                .                .          .                .               .                   }
        .                  .                  .          .                .                .          .                .               .               }
      192 ( 0.00%)        96 ( 0.00%)         0          1 ( 0.13%)       0                0          1 ( 0.13%)       .               .           }
        .                  .                  .          .                .                .          .                .               .           
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           //  Macro Kernel for the multiplication of blocks of A and B and ReLU.  We assume that
        .                  .                  .          .                .                .          .                .               .           //  these blocks were previously packed to buffers _A and _B.
        .                  .                  .          .                .                .          .                .               .           //
        .                  .                  .          .                .                .          .                .               .           void sgemm_macro_kernel_relu(
        .                  .                  .          .                .                .          .                .               .               int mc, int nc, int kc,
        .                  .                  .          .                .                .          .                .               .               float alpha, 
-- line 460 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: kernel_micro.c
--------------------------------------------------------------------------------
Ir                   Dr                  Dw                 I1mr        D1mr               D1mw             ILmr        DLmr             DLmw       

-- line 115 ----------------------------------------
          .                   .                  .           .                  .                .           .                .          .                           if (C[i * incRowC + j * incColC] < 0) C[i * incRowC + j * incColC] = 0;
          .                   .                  .           .                  .                .           .                .          .                       }
          .                   .                  .           .                  .                .           .                .          .                   }
          .                   .                  .           .                  .                .           .                .          .               }
          .                   .                  .           .                  .                .           .                .          .           }
          .                   .                  .           .                  .                .           .                .          .           
          .                   .                  .           .                  .                .           .                .          .           void sgemm_micro_kernel_neon_8x8(
          .                   .                  .           .                  .                .           .                .          .               int kc, float alpha, const float *A, const float *B, float beta, float *C, int incRowC, int incColC)
    663,552 ( 0.28%)          0            589,824 ( 6.49%)  2 ( 0.26%)         0            3,486 ( 0.62%)  2 ( 0.26%)       0          6 ( 0.03%)  {
          .                   .                  .           .                  .                .           .                .          .               /**
          .                   .                  .           .                  .                .           .                .          .                * ASSUME
          .                   .                  .           .                  .                .           .                .          .                * k is multiple of 8
          .                   .                  .           .                  .                .           .                .          .                * beta == 1
          .                   .                  .           .                  .                .           .                .          .                * incRowC == 1
          .                   .                  .           .                  .                .           .                .          .                */
          .                   .                  .           .                  .                .           .                .          .           
          .                   .                  .           .                  .                .           .                .          .               // A is column-wise ordered buffer
          .                   .                  .           .                  .                .           .                .          .               // B is row-wise ordered buffer
          .                   .                  .           .                  .                .           .                .          .           
          .                   .                  .           .                  .                .           .                .          .               int i, j, k;
          .                   .                  .           .                  .                .           .                .          .           
          .                   .                  .           .                  .                .           .                .          .               // INIT AB = C
    663,552 ( 0.28%)  1,253,376 ( 2.23%)         0           1 ( 0.13%)   884,736 (12.82%)       0           1 ( 0.13%) 301,056 (57.84%) .               __asm__ volatile(
          .                   .                  .           .                  .                .           .                .          .                   // load C to v16-31 (memory-friendly order)
          .                   .                  .           .                  .                .           .                .          .                   "ld1 {v16.4S-v17.4S}, [x0], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "ld1 {v18.4S-v19.4S}, [x0], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "ld1 {v20.4S-v21.4S}, [x0], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "ld1 {v22.4S-v23.4S}, [x0], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "ld1 {v24.4S-v25.4S}, [x0], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "ld1 {v26.4S-v27.4S}, [x0], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "ld1 {v28.4S-v29.4S}, [x0], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "ld1 {v30.4S-v31.4S}, [x0], %[incColC]\n\t" 
          .                   .                  .           .                  .                .           .                .          .                   ::
          .                   .                  .           .                  .                .           .                .          .                   [C] "r"(C),
    147,456 ( 0.06%)     73,728 ( 0.13%)         .           .                  .                .           .                .          .                   [incColC] "r"(incColC * 4)
          .                   .                  .           .                  .                .           .                .          .               );
          .                   .                  .           .                  .                .           .                .          .           
          .                   .                  .           .                  .                .           .                .          .               // COMPUTE C <- C + alpha * AB
 14,966,784 ( 6.25%)  3,686,400 ( 6.56%) 1,253,376 (13.78%)  1 ( 0.13%)         0            1,728 ( 0.31%)  1 ( 0.13%)       .          .               for (k = 0; k < kc/8; k++)
    146,256 ( 0.06%)     30,912 ( 0.05%)     3,072 ( 0.03%) 12 ( 1.57%)     4,668 ( 0.07%)     168 ( 0.03%) 12 ( 1.58%)     993 ( 0.19%) .           => kernel_micro.c:sgemm_micro_kernel_neon_8x8'2 (48x)
          .                   .                  .           .                  .                .           .                .          .               {
          .                   .                  .           .                  .                .           .                .          .                   // compute (8, 1) @ (1, 8)
201,719,808 (84.26%) 41,287,680 (73.43%)         0          10 ( 1.31%) 5,095,476 (73.81%)       0          10 ( 1.31%)  52,281 (10.05%) .                   __asm__ volatile(
          .                   .                  .           .                  .                .           .                .          .                       /********** K=0 **********/
          .                   .                  .           .                  .                .           .                .          .           
          .                   .                  .           .                  .                .           .                .          .                       // load A(8, 1) & B(1, 8)
          .                   .                  .           .                  .                .           .                .          .                       "ld1 {v0.4S-v1.4S}, [%[A]], #32\n\t"
          .                   .                  .           .                  .                .           .                .          .                       "ld1 {v2.4S-v3.4S}, [%[B]], #32\n\t"
          .                   .                  .           .                  .                .           .                .          .           
          .                   .                  .           .                  .                .           .                .          .                       // mult alpha to A
          .                   .                  .           .                  .                .           .                .          .                       "dup v4.4S, %w[alpha]\n\t"
-- line 164 ----------------------------------------
-- line 396 ----------------------------------------
          .                   .                  .           .                  .                .           .                .          .                       "fmla v28.4S, v2.4S, v1.4S[2]\n\t"
          .                   .                  .           .                  .                .           .                .          .                       "fmla v29.4S, v3.4S, v1.4S[2]\n\t"
          .                   .                  .           .                  .                .           .                .          .                       "fmla v30.4S, v2.4S, v1.4S[3]\n\t"
          .                   .                  .           .                  .                .           .                .          .                       "fmla v31.4S, v3.4S, v1.4S[3]\n\t"
          .                   .                  .           .                  .                .           .                .          .           
          .                   .                  .           .                  .                .           .                .          .                       ::[A] "r"(A),
          .                   .                  .           .                  .                .           .                .          .                       [B] "r"(B), [alpha] "r"(alpha)
          .                   .                  .           .                  .                .           .                .          .                       : "x0");
  3,538,944 ( 1.48%)  1,179,648 ( 2.10%) 1,179,648 (12.97%)  0              4,464 ( 0.06%)       .           .                .          .                   A += MR*8;
  3,538,944 ( 1.48%)  1,179,648 ( 2.10%) 1,179,648 (12.97%)  .                  .                .           .                .          .                   B += NR*8;
          .                   .                  .           .                  .                .           .                .          .               }
          .                   .                  .           .                  .                .           .                .          .           
    663,552 ( 0.28%)     73,728 ( 0.13%) 1,179,648 (12.97%)  0                  0          395,136 (70.43%)  .                .          .               __asm__ volatile(
          .                   .                  .           .                  .                .           .                .          .                   // store C
          .                   .                  .           .                  .                .           .                .          .                   "st1 {v16.4S-v17.4S}, [%[C]], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "st1 {v18.4S-v19.4S}, [%[C]], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "st1 {v20.4S-v21.4S}, [%[C]], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "st1 {v22.4S-v23.4S}, [%[C]], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "st1 {v24.4S-v25.4S}, [%[C]], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "st1 {v26.4S-v27.4S}, [%[C]], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "st1 {v28.4S-v29.4S}, [%[C]], %[incColC]\n\t"
          .                   .                  .           .                  .                .           .                .          .                   "st1 {v30.4S-v31.4S}, [%[C]], %[incColC]\n\t" ::[C] "r"(C),
    147,456 ( 0.06%)     73,728 ( 0.13%)         0           1 ( 0.13%)     6,054 ( 0.09%)       0           1 ( 0.13%)       .          .                   [incColC] "r"(incColC * 4));
          .                   .                  .           .                  .                .           .                .          .           
    221,184 ( 0.09%)          .                  .           .                  .                .           .                .          .           }

--------------------------------------------------------------------------------
Ir                   Dr                  Dw                 I1mr        D1mr               D1mw             ILmr        DLmr             DLmw            
--------------------------------------------------------------------------------
239,307,312 (99.96%) 56,201,700 (99.95%) 9,081,432 (99.88%) 43 ( 5.62%) 6,901,640 (99.98%) 560,326 (99.88%) 43 ( 5.65%) 519,243 (99.77%) 22,269 (97.54%)  events annotated

